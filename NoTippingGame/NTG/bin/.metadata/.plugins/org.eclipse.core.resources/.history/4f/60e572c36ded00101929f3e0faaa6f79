import java.io.*;
import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;
import java.util.Random; 

//class Contestant extends NoTippingPlayer {
class Contestant {
	private static BufferedReader br;
	private String status;
	private Integer[] positions = new Integer[31];
	private Integer[][] totalTorque = new Integer[10][31];
	private Integer[] place = new Integer[21];
	private Integer[] torque = {-9, -3};
	private Map<Integer, Integer> pwPairs = new TreeMap<Integer, Integer>();
	private ArrayList<Integer> myweights = new ArrayList<Integer>();
	private boolean adding = false;
	private boolean remove = false;
	private Random random = new Random(); 
	
	Contestant(int port) {
		//super(port);
				
		for(int i=0; i<place.length; i++){
			place[i] = 0;
		}
		for(int i=0; i<10; i++){
			myweights.add(i+1);
		}
		for(int i=-15, j=0; i<16; i++, j++){
			pwPairs.put(i, 0);
			positions[j] = i; 
		}
		for (int i=0; i<myweights.size(); i++)
		{
			for (int j=0; j<positions.length; j++){
				if(positions[j]<-3){
					totalTorque[i][j] = myweights.get(i) * (-3-positions[j]);
				}else if(positions[j] == -3 || positions[j] == -2 || positions[j] == -1){
					totalTorque[i][j] = 0;
				}else{
					totalTorque[i][j] = myweights.get(i) * (-1-positions[j]);
				}
			}
		}
	}
	
	private void updateRow(int position){
		for(int i = 0; i< 10; i++){
			totalTorque[i][position+15] = 0;
		}
	}
	
	private void updateColumn(int weight){
		for(int i = 0; i< 31; i++){
			totalTorque[weight-1][i] = 0;
		}
	}
	
	private void computeTorque(int position, int weight){
		this.torque[0] += ((-3) - position) * weight;
		this.torque[1] += ((-1) - position) * weight;
	}
	
	private void getPWPairs(){
		String[] result = this.status.split("\n");
		for(int i=1; i<result.length; i++){
			String[] weight = result[i].split(" ");
			if(Integer.parseInt(weight[0]) != place[i-1]){
				place[i-1] = Integer.parseInt(weight[0]); // update place;
				int position = Integer.parseInt(weight[1]);
				int w = Integer.parseInt(weight[3]);
				pwPairs.put(position, w);
				computeTorque(position, w);
				updateRow(position);
			}
		}
		if(result[0].equals("ADDING"))
			adding = true;
		else
			remove = true;
		
	}
	
	private String add(){
		//Vars
		int left = -torque[0];
		int right = -torque[1];
		int [][]lefts = new int[10][2];
		int [][]rights = new int[10][2];
		ArrayList<PWPairs> solutions = new ArrayList<PWPairs>();  
		ArrayList<PWPairs> mins = new ArrayList<PWPairs>();  
		int min = 1000; 
		boolean isMatch = false;

		//init
		for(int i=0; i<myweights.size(); i++){
			lefts[i][0] = -1; 
			lefts[i][1] = 1000;
			rights[i][0] = -1; 
			rights[i][1] = 1000; }
				
			//search in the matrix the best match possible
			for(int i=0; i<myweights.size(); i++){
				for(int j=i; j<totalTorque[i].length; j++){
					
					if (totalTorque[i][j] == -right)
					{
						rights[i][0] = j;
						rights[i][1] = 0; 
						solutions.add(new PWPairs(i, j));
						isMatch = true; 
						break; 
					}
					if (totalTorque[i][j] != -right && !isMatch)	
					{	if (Math.abs(totalTorque[i][j]+right) <=rights[i][1] && i>=1){
						rights[i][0] = j;
						rights[i][1] = Math.abs(totalTorque[i][j]+right);
						System.out.println ("aa"+rights[i][1]);
						if (rights[i][1]<min){
							min=rights[i][1];
							System.out.println("New min: "+min);
							mins.clear();
							mins.add(new PWPairs(i, j));
							}
						if (rights[i][1]==min)
							{System.out.println("Append: "+min+" "+rights[i][1]);
							mins.add(new PWPairs(i, j));}	
					}

					}
					if (totalTorque[i][j] == left)
					{
						lefts[i][0] = j;
						lefts[i][1] = 0; 
						solutions.add(new PWPairs(i, j));
						isMatch = true; 
						break; 
					}
					if (totalTorque[i][j] != left && !isMatch)	
					{	if (Math.abs(totalTorque[i][j]-left) <=lefts[i][1] && i>=1){
						lefts[i][0] = j;
						lefts[i][1] = Math.abs(totalTorque[i][j]-left);
						if (lefts[i][0]<min){
							min=j;
							mins.clear();
							mins.add(new PWPairs(i, j));
							}
						else if (lefts[i][0]==min)
							mins.add(new PWPairs(i, j));	
						}
					}
				}
			}

		for(int i=0; i<myweights.size(); i++){	
			System.out.println (lefts[i][0]+" "+lefts[i][1]+"\t\t"+rights[i][0]+" "+rights[i][1]); 
		}
		
		//Choose the best match: 
		//case 1: if exact match was found:
		int index; 
		PWPairs move; 
		if (isMatch){
			index = random.nextInt(solutions.size()); 	
			move = solutions.get(index);}
		
		//case 2: if no exact match was found:
		else{
			index = random.nextInt(mins.size()); 
			move = mins.get(index);}
		
		System.out.println ("Our move is "+move);
		updateColumn(move.get(0)); 
		updateRow(move.get(1)); 
		
		return null;
	}
	
	private String remove(){
		return null;
	}
	
	protected String process(String command) {
		this.status = command;
		getPWPairs();
//		System.out.println(pwPairs.size());
//		System.out.println(torque[0]+ " "+ torque[1]);
		for(int i=0; i<place.length; i++){
			System.out.println(place[i]);
		}
		//System.out.println(adding);
		//System.out.println(command);
		//System.out.println("Enter move (position weight): ");
		try {
			if(adding){
				return add();
			}else{
				return remove();
			}
		} catch (Exception ev) {
			System.out.println(ev.getMessage());
		}
		return "";			
	}

	public static void main(String[] args) throws Exception {
		/*br = new BufferedReader(new InputStreamReader(System.in));
		Contestant con = new Contestant(Integer.parseInt(args[0]));
		con.process(br.toString());*/
		String s = "ADDING\n1 -8 Red 1\n0 0 Blue 1\n0 0 Red 2\n0 0 Blue 2" +
				"\n0 0 Red 3\n0 0 Blue 3\n0 0 Red 4\n0 0 Blue 4\n0 0 Red 5" +
				"\n0 0 Blue 5\n0 0 Red 6\n0 0 Blue 6\n0 0 Red 7\n0 0 Blue 7" +
				"\n0 0 Red 8\n0 0 Blue 8\n0 0 Red 9\n0 0 Blue 9\n0 0 Red 10" +
				"\n0 0 Blue 10\n1 -4 Green 3\n";
		Contestant con = new Contestant(10003);
		con.process(s);
	}
}
